import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '7682618151:AAGPkcLsux6vNUH33KcX1K-J9z5zgoJPlEk'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# In-memory storage for users
users = {}
matches = {}

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_goal = State()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üéØ –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∫–æ –î–Ω—é –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await Registration.waiting_for_name.set()

@dp.message_handler(state=Registration.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await Registration.waiting_for_age.set()

@dp.message_handler(state=Registration.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å? üíï –î–ª—è —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ –∏–ª–∏ ü§ù –î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞? (–æ—Ç–≤–µ—Ç—å '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞' –∏–ª–∏ '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ')")
    await Registration.waiting_for_goal.set()

@dp.message_handler(state=Registration.waiting_for_goal)
async def process_goal(message: types.Message, state: FSMContext):
    goal = message.text.lower()
    if goal not in ['—Ä–æ–º–∞–Ω—Ç–∏–∫–∞', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏: '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞' –∏–ª–∏ '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ'.")
        return
    user_data = await state.get_data()
    users[message.from_user.id] = {
        'name': user_data['name'],
        'age': user_data['age'],
        'goal': goal
    }
    await state.finish()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É. üîç")
    await match_user(message)

async def match_user(message: types.Message):
    user_id = message.from_user.id
    for other_id, other_data in users.items():
        if other_id != user_id and other_data['goal'] == users[user_id]['goal'] and other_id not in matches.values():
            matches[user_id] = other_id
            matches[other_id] = user_id

            await bot.send_message(user_id, f"üéØ –í–∞—à–∞ –ø–∞—Ä–∞: {other_data['name']}, {other_data['age']} –ª–µ—Ç!")
            await bot.send_message(other_id, f"üéØ –í–∞—à–∞ –ø–∞—Ä–∞: {users[user_id]['name']}, {users[user_id]['age']} –ª–µ—Ç!")
            return
    await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–∞—Ä—ã. –Ø —Å–æ–æ–±—â—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è! ‚è≥")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
